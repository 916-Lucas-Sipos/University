        -:    0:Source:D:/CLion/A5-6(2.0)/Repository/DynamicVector.h
        -:    0:Graph:D:\CLion\A5-6(2.0)\cmake-build-debug-coverage\CMakeFiles\A5_6.dir\main.cpp.gcno
        -:    0:Data:D:\CLion\A5-6(2.0)\cmake-build-debug-coverage\CMakeFiles\A5_6.dir\main.cpp.gcda
        -:    0:Runs:1
        -:    1:#pragma once
        -:    2:#define RESIZE 2
        -:    3:
        -:    4:template<typename T>
        -:    5:class DynamicVector {
        -:    6:private:
        -:    7:    T* elements;
        -:    8:    int size{};
        -:    9:    int capacity{};
        -:   10:
        -:   11:public:
        -:   12:    // default constructor for DynamicVector
        -:   13:    explicit DynamicVector(int capacity = 10);
        -:   14:
        -:   15:    // copy constructor for a DynamicVector
        -:   16:    DynamicVector(const DynamicVector<T>& vector);
        -:   17:
        -:   18:    // destructor for DynamicVector
        -:   19://    ~DynamicVector();
        -:   20:
        -:   21:    // add an element to the current DynamicVector
        -:   22:    void addItem(const T& element);
        -:   23:
        -:   24:    // delete an element from the current DynamicVector
        -:   25:    void deleteItem(int position);
        -:   26:
        -:   27:    // update an element on a given position from the current DynamicVector
        -:   28:    void updateItem(int position, T element);
        -:   29:
        -:   30:    // resize the current DynamicVector
        -:   31:    void resize();
        -:   32:
        -:   33:    T operator[](int index);
function _ZNK13DynamicVectorI5MovieE7getSizeEv called 65 returned 100% blocks executed 100%
       65:   34:    int getSize() const { return this->size; }
       65:   34-block  0
function _ZNK13DynamicVectorI5MovieE11getCapacityEv called 13 returned 100% blocks executed 100%
       13:   35:    int getCapacity() const { return this->capacity; }
       13:   35-block  0
function _ZNK13DynamicVectorI5MovieE10getElementEi called 5 returned 100% blocks executed 100%
        5:   36:    T getElement(const int position) const { return this->elements[position]; }
        5:   36-block  0
call    0 returned 5
        -:   37:};
        -:   38:
        -:   39:template<typename T>
function _ZN13DynamicVectorI5MovieEC1Ei called 13 returned 100% blocks executed 47%
       13:   40:DynamicVector<T>::DynamicVector(int capacity) {
       13:   41:    this->size = 0;
       13:   42:    this->capacity = capacity;
     134*:   43:    this->elements = new T[capacity];
       13:   43-block  0
branch  0 taken 13 (fallthrough)
branch  1 taken 0
       13:   43-block  1
    %%%%%:   43-block  2
       13:   43-block  3
call    2 returned 13
      121:   43-block  4
call    3 returned 121
branch  4 taken 121 (fallthrough)
branch  5 taken 0 (throw)
      121:   43-block  5
      134:   43-block  6
branch  6 taken 121
branch  7 taken 13 (fallthrough)
    $$$$$:   43-block  7
    $$$$$:   43-block  8
call    8 never executed
    $$$$$:   43-block  9
branch  9 never executed
branch 10 never executed
    $$$$$:   43-block 10
    $$$$$:   43-block 11
    $$$$$:   43-block 12
call   11 never executed
       13:   44:}
       13:   44-block  0
        -:   45:
        -:   46:template<typename T>
function _ZN13DynamicVectorI5MovieEC1ERKS1_ called 9 returned 100% blocks executed 63%
        9:   47:DynamicVector<T>::DynamicVector(const DynamicVector<T> &vector) {
        9:   48:    this->size = vector.getSize();
        9:   48-block  0
call    0 returned 9
        9:   49:    this->capacity = vector.getCapacity();
call    0 returned 9
      99*:   50:    this->elements = new T[this->capacity];
branch  0 taken 9 (fallthrough)
branch  1 taken 0
        9:   50-block  0
    %%%%%:   50-block  1
        9:   50-block  2
call    2 returned 9
       90:   50-block  3
call    3 returned 90
branch  4 taken 90 (fallthrough)
branch  5 taken 0 (throw)
       90:   50-block  4
       99:   50-block  5
branch  6 taken 90
branch  7 taken 9 (fallthrough)
    $$$$$:   50-block  6
    $$$$$:   50-block  7
call    8 never executed
    $$$$$:   50-block  8
branch  9 never executed
branch 10 never executed
    $$$$$:   50-block  9
    $$$$$:   50-block 10
    $$$$$:   50-block 11
call   11 never executed
       13:   51:    for (int i = 0; i < this->size; ++i)
        9:   51-block  0
       13:   51-block  1
branch  0 taken 4
branch  1 taken 9 (fallthrough)
        4:   52:        this->elements[i] = vector.getElement(i);
        4:   52-block  0
call    0 returned 4
call    1 returned 4
call    2 returned 4
        9:   53:}
        9:   53-block  0
        -:   54:
        -:   55://template<typename T>
        -:   56://DynamicVector<T>::~DynamicVector() {
        -:   57://    delete[] this->elements;
        -:   58://}
        -:   59:
        -:   60:template<typename T>
        -:   61:void DynamicVector<T>::addItem(const T &element) {
        -:   62:    if (this->size == this->capacity)
        -:   63:        this->resize();
        -:   64:    this->elements[this->size++] = element;
        -:   65:}
        -:   66:
        -:   67:template<typename T>
        -:   68:void DynamicVector<T>::deleteItem(int position) {
        -:   69:    for (int i = position; i < this->size - 1; ++i)
        -:   70:        this->elements[i] = this->elements[i + 1];
        -:   71:    --this->size;
        -:   72:}
        -:   73:
        -:   74:template<typename T>
        -:   75:void DynamicVector<T>::updateItem(int position, T element) {
        -:   76:    this->elements[position] = element;
        -:   77:}
        -:   78:
        -:   79:template<typename T>
        -:   80:void DynamicVector<T>::resize() {
        -:   81:    this->capacity *= RESIZE;
        -:   82:
        -:   83:    auto* els = new T[this->capacity];
        -:   84:    for (int i = 0; i < this->size; ++i)
        -:   85:        els[i] = this->elements[i];
        -:   86:
        -:   87:    delete[] this->elements;
        -:   88:    this->elements = els;
        -:   89:}
        -:   90:
        -:   91:template<typename T>
        -:   92:T DynamicVector<T>::operator[](int index) {
        -:   93:    return this->elements[index];
        -:   94:}
