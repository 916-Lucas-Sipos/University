(defun fnd(l e)
	(cond
		((null l) 0)
		((and (not (numberp (car l))) (atom (car l))) (+ 0 (fnd (cdr l) e)))
		((listp (car l)) (+ (fnd (car l) e) (fnd (cdr l) e)))
		((= (car l) e) (+ 1 (fnd (cdr l) e)))
		(T (+ 0 (fnd (cdr l) e)))
	)	
)
(defun rm(l l2)
	(cond
		((null l) nil)
		((and (not (numberp (car l))) (atom (car l))) (cons (car l) (rm (cdr l) l2)))
		((listp (car l)) (cons (rm (car l) l2) (rm (cdr l) l2)))
		((= (mod (fnd l2 (car l)) 2) 0) (rm (cdr l) l2))
		(T (cons (car l) (rm (cdr l) l2)))
	)
)
(print (rm '(1 G (1 H 8 E (2))) '(1 G (1 H 8 E (2)))))
(print (rm '(1 2 3 4 5 1) '(1 2 3 4 5 1)))
(print (rm '(1 (A B 2 (1 2 T) C 3) 3) '(1 (A B 2 (1 2 T) C 3) 3)))
(print (rm '(A 4 (5 5 F) 1 G) '(A 4 (5 5 F) 1 G)))
